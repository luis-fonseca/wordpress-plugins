Como funcionam os plugins do Wordpress

Os plugins ficam instalados em wp-content/plugins.

NOTA: não usar o bloco de notas para editar arquivos PHP, pois, ao salvar, ele deixa espaços extras que danificam o funcionamento do aplicativo. 

Ao criar uma pasta de plugin é necessário ter um arquivo com o mesmo nome, mas com a extensão .php.

- plugin-luis
  - plugin-luis.php
  
Todo plugin deverá conter as seguintes informações de desenvolvimento, por exemplo,

/**
 * @package Hello_Dolly
 * @version 1.6
 */
/*
Plugin Name: Hello Dolly
Plugin URI: http://wordpress.org/plugins/hello-dolly/
Description: This is not just a plugin, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Louis Armstrong: Hello, Dolly. When activated you will randomly see a lyric from <cite>Hello, Dolly</cite> in the upper right of your admin screen on every page.
Author: Matt Mullenweg
Version: 1.6
Author URI: http://ma.tt/
*/

Essas informações serão exibidas na tela de gerenciamento de plugins.


Adicionar um nome item de menu

Ganchos de ação do Wordpress (action hooks)
Os ganchos de ação do Wordpress são uma forma de adicionar o código personalizado de outros desenvolvedores em pontos específicos dentro do próprio código do Wordpress de forma a expandí-lo ou personalizá-lo.

Uma action, ou gancho, é uma ação executada após determinado evento, por exemplo, adicionar um novo usuário ou salvar uma publicação.
Para adicionar um novo item de menu é necessário executar uma ação com a função nativa do Wordpress add_action (gancho). add_action precisará de dois argumentos: o local onde será executada a ação e a função que deverá ser chamada para adicionar o item de menu.

add_action('admin_menu', 'pone_register_menu');

function pone_register_menu() {
  // a próxima instrução adicionará uma página onde cada argumento definirá argumentos informações:
  // primeiro argumento, o nome da página
  // segundo argumento, o nome do item de menu
  // terceiro argumento, permissão de acesso para administradores
  // quarto argumento, personalizações da página
  // quinto argumento, renderiza a página automaticamente
  add_option_page('Plugin Luís', 'Boas vindas', 'manage_options', 
    'pone_hello_page', 'pone_render_page');
    
  function pone_render_page() {
  }
}

É possível, nos argumentos que simbolizam funções, especificar parâmetros adicionais ao criar uma função. Essa função pode existir dentro de outra ou como uma função independente.

function pone_register_menu() {
  // a próxima instrução adicionará uma página onde cada argumento definirá argumentos informações:
  // primeiro argumento, o nome da página
  // segundo argumento, o nome do item de menu
  // terceiro argumento, permissão de acesso para administradores. Para mais informações sobre capacidades, https://codex.wordpress.org/pt-br:Pap%C3%A9is_e_Capacidades#Capacidades
  // quarto argumento, personalizações da página
  // quinto argumento, renderiza a página automaticamente
  add_options_page('Plugin Luís', 'Boas vindas', 'manage_options', 
    'pone_hello_page', 'pone_render_page');
    
  function pone_render_page() {
  }
}

ou, como recomendável, 

function pone_register_menu() {
  // a próxima instrução adicionará uma página onde cada argumento definirá argumentos informações:
  // primeiro argumento, o nome da página
  // segundo argumento, o nome do item de menu
  // terceiro argumento, permissão de acesso para administradores
  // quarto argumento, é o slug da página
  // quinto argumento, chama uma função para a saída da página
  add_options_page('Plugin Luís', 'Boas vindas', 'manage_options', 
    'pone_hello_page', 'pone_render_page');
}

// função de comando para atualização da página
function pone_render_page() {
}

Por fim, o código para geração da página deve ficar dessa forma,

<?php
function pone_render_page() { ?>
    <div class="wrap">
        <h2>Boas vindas!</h2>
        <div class="description">Esta é a primeira página criada com o plugin.</div>
    </div>
<?php } ?>

O código HTML deve ficar de fora do código PHP como especificado pelas tags de fechamento do código PHP, antes do código HTML. Além disso, o PHP fornece algumas classes CSS para manter o padrão entre as páginas como wrap e description.

Nota: Para usar esse tutorial criei um banco de dados com o nome 'curso_plugins'.

A função wp_die() finaliza um script e permite a exibição de um conteúdo no formato HTML.

A função wp_options_page é um empacotador (wrapper) para a função add_submenu_page. O novo item será adicionado no menu Configurações (Settings).

A função plugin_dir_path(__FILE__) exibe o diretório de instalação do plugin. É útil para servir de referência para o ponto inicial da aplicação.

Nota: É importante definir um prefixo para o plugin de forma a facilitar a sua identificação das demais funções do Wordpress.

A função trailingslashit() remove a barra de separação de diretório, se houver, e adiciona logo em seguida. É útil para não ter uma barra de separação duplicada.

A função dirname do PHP retorna o diretório de um arquivo.

É importante dividir as funções do plugins em arquivos separados de forma a facilitar o desenvolvimento.

A função plugins_url() traz a URL absoluta de onde os plugins são instalados. Caso o único argumento seja __FILE__, trará a URL absoluta do arquivo referenciado por __FILE__. Caso existam dois argumento, o primeiro um caminho relativo incluindo o nome do arquivo e o segundo __FILE__, a função retornará a URL absoluta desse arquivo.

 do plugin caso especificado __FILE__ como argumento. Caso especificado o primeiro argumento o nome do arquivo, a URL absoluta apontará para ele. Por exemplo,

echo plugins_url(__FILE__); // http://localhost/~replicant/wordpress/plugins/wordpress-hugo-plugins/wp-content/plugins/home/replicant/public_html/wordpress/plugins/wordpress-hugo-plugins/wp-content/plugins/plugin-luis/admin.php

echo plugins_url('images/foo.jpg', __FILE__); // http://localhost/~replicant/wordpress/plugins/wordpress-hugo-plugins/wp-content/plugins/plugin-luis/images/foo.jpg
